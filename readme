upstream: https://git.beegfs.io/pub/v7.git
xb7.4.2: git@github.com:ssbandjl/beegfs_v74_master.git

doc:
源码编译: https://git.beegfs.io/pub/v7/-/tree/7.4.2?ref_type=tags
从源码编译: https://doc.beegfs.io/latest/advanced_topics/building_from_sources.html
7.4.2 doc: https://doc.beegfs.io/latest/index.html


version:
commit eb91e8a177696adcd8eedfb616f9acdbb79dde6e (HEAD -> master, tag: 7.4.2, origin/master, origin/HEAD)
Author: Philipp Falk <philipp.falk@thinkparq.com>
Date:   Fri Nov 10 11:21:43 2023 +0100
    update to release 7.4.2


dev_env:
[root@node14 v7]# cat /etc/*-release
Rocky Linux release 8.9 (Green Obsidian)
NAME="Rocky Linux"
VERSION="8.9 (Green Obsidian)"

install devtool
dnf list gcc-toolset-*-toolchain
dnf install gcc-toolset-9
scl enable gcc-toolset-9 bash


build:
[root@node14 v7]# history|tail -n 20
yum install libnl3-devel
yum install libblkid-devel
yum install libuuid-devel libibverbs-devel librdmacm-devel libattr-devel redhat-rpm-config rpm-build xfsprogs-devel zlib-devel ant gcc-c++ gcc redhat-lsb-core java-devel unzip libcurl-devel elfutils-libelf-devel kernel-devel -y
rm -rf packages;make package-rpm PACKAGE_DIR=packages DEBUILD_OPTS="-j64"


install:
cd packages/RPMS/x86_64/
rpm -ivh beegfs-mgmtd-7.4.2-el8.x86_64.rpm 
yum install ./beegfs-mgmtd-7.4.2-el8.x86_64.rpm 
cd ..
cd noarch/
rpm -ivh beegfs-common-7.4.2-el8.noarch.rpm 
rpm -ivh beegfs-mgmtd-7.4.2-el8.x86_64.rpm
rpm -ivh beegfs-meta-7.4.2-el8.x86_64.rpm 
rpm -ivh beegfs-storage-7.4.2-el8.x86_64.rpm 
rpm -ivh beegfs-utils-7.4.2-el8.x86_64.rpm beegfs-helperd-7.4.2-el8.x86_64.rpm
cd ..
cd noarch/
rpm -ivh beegfs-client-7.4.2-el8.noarch.rpm 
rpm -ivh beegfs-mon-grafana-7.4.2-el8.noarch.rpm 
vi /etc/beegfs/beegfs-mgmtd.conf 



BeeGFS源码分析2-客户端概要分析: https://www.chinacion.cn/article/6774.html

编译:
make -C admon/build admon_gui

问题: Error :Arc dependent binaries in noarch package (CentOS 6.5)
添加如下定义到spec中
%define _binaries_in_noarch_packages_terminate_build   0

build:
clear;make package-rpm PACKAGE_DIR=packages BEEGFS_VERSION=7.1.5-local1




__IBVSocket_waitForRecvCompletionEvent
    ibv_poll_cq


IBVSocket_checkConnection

__IBVSocket_postWrite
    ibv_post_send


gds:
cuFileWrite

nvfs-dma.h





__IBVSocket_postRead


config:
beegfs-mounts.conf



client内核模块:
module_init(init_fhgfs_client)
    ...
    FhgfsOps_registerFilesystem -> 注册文件系统




static struct file_system_type fhgfs_fs_type =
{
   .name       = BEEGFS_MODULE_NAME_STR,
   .owner      = THIS_MODULE,
   .kill_sb    = FhgfsOps_killSB,
   //.fs_flags   = FS_BINARY_MOUNTDATA, // not required currently

#ifdef KERNEL_HAS_GET_SB_NODEV
   .get_sb     = FhgfsOps_getSB,
#else
   .mount      = FhgfsOps_mount, // basically the same thing as get_sb before  挂载文件系统
#endif
};

int FhgfsOps_fillSuper(struct super_block* sb, void* rawMountOptions, int silent) -> 填充文件系统超级块
    ...
    rootInode = __FhgfsOps_newInode(sb, &kstat, 0, &entryInfo, &iSizeHints)


文件系统接口: client_module/source/filesystem/FhgfsOpsFile.h
write io path:
FhgfsOps_write
    write_common
        FhgfsOpsHelper_writeCached
       _FhgfsOpsHelper_writeCacheFlushed
           FhgfsOpsHelper_writefileEx
               # appendfile
               FhgfsOpsHelper_appendfile
                       FhgfsOpsHelper_appendfileVecOffset
                             FhgfsOpsRemoting_writefile
                                  FhgfsOpsRemoting_writefileVec
               # writefile
               FhgfsOpsRemoting_writefile
                       FhgfsOpsRemoting_writefileVec


ssize_t __FhgfsOps_directIO_common(int rw, struct kiocb *iocb, struct iov_iter *iter, loff_t pos)
    remotingRes = FhgfsOpsRemoting_writefileVec(&bgfsIter, pos, &ioInfo, false) -> 写
        FhgfsOpsCommKit_writefileV2bCommunicate
            __commkit_senddata_generic
                __commkit_prepare_io
                sendRes = context->ops->sendData(context, info) -> static int __commkit_writefile_sendData
                    sendRes = info->socket->ops->sendto(info->socket, data, MSG_DONTWAIT, NULL) -> ssize_t RDMASocketImpl::sendto(const void *buf, size_t len, int flags, const struct sockaddr *to, socklen_t tolen)
                        IBVSocket_send(ibvsock, (const char*)buf, len, flags | MSG_NOSIGNAL)
                            __IBVSocket_flowControlOnSendWait
                            postRes = __IBVSocket_postSend(_this, currentBufIndex, currentPostLen)
                                wr.opcode     = IBV_WR_SEND;
                                wr.send_flags = IBV_SEND_SIGNALED;
                                postRes = ibv_post_send(commContext->qp, &wr, &bad_wr)
    remotingRes = FhgfsOpsRemoting_readfileVec(&bgfsIter, iov_iter_count(&bgfsIter), pos, &ioInfo, fhgfsInode) -> 读





文件操作:
struct file_operations fhgfs_file_buffered_ops =
{
   .open             = FhgfsOps_open,
   .release          = FhgfsOps_release,
   .fsync            = FhgfsOps_fsync,
   .flush            = FhgfsOps_flush,
   .llseek           = FhgfsOps_llseek,
   .flock            = FhgfsOps_flock,
   .lock             = FhgfsOps_lock,
   .mmap             = FhgfsOps_mmap,
   .unlocked_ioctl   = FhgfsOpsIoctl_ioctl,
#ifdef CONFIG_COMPAT
   .compat_ioctl     = FhgfsOpsIoctl_compatIoctl,
#endif // CONFIG_COMPAT

#ifdef KERNEL_HAS_ITER_FILE_SPLICE_WRITE
   .splice_read  = generic_file_splice_read,
   .splice_write = iter_file_splice_write,
#else
   .splice_read  = generic_file_splice_read,
   .splice_write = generic_file_splice_write,
#endif // LINUX_VERSION_CODE

#if defined(KERNEL_HAS_WRITE_ITER)
   .read_iter           = FhgfsOps_buffered_read_iter,
   .write_iter          = FhgfsOps_buffered_write_iter, // replacement for aio_write
#else
   .read                = FhgfsOps_read,
   .write               = FhgfsOps_write,  // 写IO
   .aio_read            = FhgfsOps_buffered_aio_read,
   .aio_write           = FhgfsOps_buffered_aio_write,
#endif // LINUX_VERSION_CODE

#ifdef KERNEL_HAS_GENERIC_FILE_SENDFILE
   .sendfile   = generic_file_sendfile, // removed in 2.6.23 (now handled via splice)
#endif // LINUX_VERSION_CODE
};


数据发送接口: common/source/common/net/sock/StandardSocket.h
rdma write:
...
workLoop
...
bool ReadLocalFileMsgExBase<Msg, ReadState>::processIncoming
incrementalReadStatefulAndSendV2
inline ssize_t readStateSendData(Socket* sock, ReadState& rs, char* buf, bool isFinal) -> 通过RDMA将数据写到远程内存
virtual ssize_t write(const void *buf, size_t len, unsigned lkey, const uint64_t rbuf, unsigned rkey) -> ssize_t RDMASocketImpl::write(const void *buf, size_t len, unsigned lkey, const uint64_t rbuf, unsigned rkey)
    IBVSocket_write(this->ibvsock, (char *)buf, len, lkey, rbuf, rkey)
    ssize_t RDMASocketImpl::write
    IBVSocket_write
    __IBVSocket_postWrite
        wr.opcode     = IBV_WR_RDMA_WRITE;
        wr.send_flags = IBV_SEND_SIGNALED;
        postRes = ibv_post_send(commContext->qp, &wr, &bad_wr)


创建文件:
FhgfsOps_createIntent
  =>FhgfsInode_entryInfoReadLock
  =>FhgfsInode_initIsizeHints
  =>FhgfsOpsRemoting_lookupIntent
       ==>LookupIntentMsg_initFromEntryInfo
           ===>LookupIntentMsg_init # NETMSGTYPE_LookupIntent
       ==>LookupIntentInfoOut_initFromRespMsg
  =>FhgfsInode_entryInfoReadUnlock
 
### Message: NETMSGTYPE_LookupIntent
LookupIntentMsgEx::executeLocally
  =>LookupIntentMsgEx::create
    ==>MsgHelperMkFile::mkFile
       ===>DirInode::createFileStripePattern
          ====>DirInode::createFileStripePatternUnlocked
             =====>NodeCapacityPools::chooseStorageTargets
                            # CapacityPooll [ NORMAL ]
                            # CapacityPooll [ LOW ]
                            # CapacityPooll [ EMERGENCY ]
     ==>MetaStore::mkNewMetaFile
 
MkFileMsgEx::executeLocally
   =>MkFileMsgEx::executePrimary
      ==>App->getMetaStore->referenceDir
      ==>MsgHelperMkFile::mkFile
           DirInode::createFileStripePattern
                  DirInode::createFileStripePatternUnlocked
                        TargetCapacityPools::chooseStorageTargets
           MetaStore::mkNewMetaFile
                  StorageTk::generateFileID
                  DirEntry->setFileInodeData
                  DirInode::makeDirEntryUnlocked
                        DirEntryStore::makeEntry
                            DirEntryStore::makeEntryUnlocked
                                DirEntry::storeInitialDirEntry
                                     DirEntry::storeInitialDirEntryName
                                        link,  unlink
                                MetaSyncCandidateFile->addModification
      ==>App->getMetaStore->releaseDir  
       
   =>MkFileMsgEx::executeSecondary
      ==>App->getMetaStore->referenceDir
      ==>MsgHelperMkFile::mkFile
      ==>App->getMetaStore->releaseDir 


BeeGFS创建目录
FhgfsOps_mkdir
   =>FhgfsInode_entryInfoReadLock
   =>FFhgfsOpsRemoting_mkdir
      ==>FMkDirMsg_initFromEntryInfo
         ===>FMkDirMsg_init   # NETMSGTYPE_MkDir
      ==>FRequestResponseArgs_prepare
      ==>FMessagingTk_requestResponseNodeRetryAutoIntr
   =>FFhgfsInode_entryInfoReadUnlock
 
###  MessageType: NETMSGTYPE_MkDir 
MkDirMsgEx::executeLocally
   =>MkDirMsgEx::mkDirPrimary
      ==>NodeCapacityPools::chooseStorageTargets
      ==>MkDirMsgEx::mkRemoteDirInode
      ==>MkDirMsgEx::mkDirDentry
   =>MkDirMsgEx::mkDirSecondary


管理面:
beegfs-ctl
